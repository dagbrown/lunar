#!/bin/bash
############################################################
#                                                          #
# check/lunar - module sanity checking functions           #
#                                                          #
############################################################
#                                                          #
# Copyright 2005 Auke Kok under GPLv2                      #
#                                                          #
############################################################


run_checks() {
	debug_msg "run_checks ($@)"
	verbose_msg "Running sanity checks for module \"$1\""
	(
		run_details $1
		plugin_call MODULE_CHECK $1
		if [ $? == 2 ]; then
			return 0
		fi
		return 1
	)
}


# rework_module : re-create depends database for a module
rework_module() {
	local MODULE
	debug_msg "rework_module ($@)"

	# we declare these local to override the systems default ones:
	optional_depends()  {
		local DEP
		debug_msg "  optional_depends ($@)"
		DEP=$(NEVER_ASK=1 DEPS_ONLY= expand_alias $1)
		if module_exiled $DEP ; then
            try_sqlite $MODULE_STATUS "
              insert into depends_status values (
                '$MODULE', '$DEP', 0,0,'$2','$3', 1 )"

        elif [ $(try_sqlite $MODULE_STATUS "
            select count(*) > 0 from depends_status
                where module = '$MODULE'
                  and dependency = '$DEP'
                  and required = 0") == 1 ]
        then
            try_sqlite $MODULE_STATUS "
                update depends_status
                    set flags_for_active = '$2',
                        flags_for_not_active = '$3',
                        updated = 1
                    where module = '$MODULE'
                    and dependency = '$DEP'"
			# if we don't know the answer we leave it open for the user to decide
		fi
	}

	depends()  {
		local DEP
		debug_msg "  depends ($@)"
		DEP=$(NEVER_ASK=1 DEPS_ONLY= expand_alias $1)
        try_sqlite $MODULE_STATUS "
          insert into depends_status values (
            '$MODULE', '$DEP', 1,1,'$2','$3', 1 )"

	}

	run_depends() {
	debug_msg "  run_depends ($@)"
	 (
		if run_details $1 &> /dev/null ; then
			if has_module_file $MODULE DEPENDS ; then
				run_module_file $MODULE DEPENDS | grep -v '%'
			fi
		fi
	 )
	}

	# here starts the real work:
	MODULE=$1

	# remove whatever depends was residing in the depends state file and
	# append the new output:
	(
        try_sqlite $MODULE_STATUS "
            delete from depends_status where
                module = '$MODULE' and required = 1'
            update depends_status where
                module = '$MODULE' and required = 0
                set updated = 0;'"
		run_depends $MODULE >> $DEPENDS_STATUS
        try_sqlite $MODULE_STATUS "delete from depends_status where updated = 0"
	)
}


# fix_depends : single pass to fix depends database
fix_depends () {
	local LIST
	debug_msg "fix_depends  ($@)"

	if [ -n "$1" ] ; then
		LIST="$@"
	else
		LIST=$(list_installed | fgrep -v -x moonbase)
	fi

	for MODULE in $LIST ; do
		rework_module $MODULE
	done
}


run_fix()  {
	local MODULES MODULE
	debug_msg "run_fix ($@)"
	MODULES=$*

	if [ -z "$MODULES" ] ; then
		MODULES=$(list_installed | fgrep -v -x moonbase)
	fi

	if [[ -n "$FIXDEPENDS" ]] ; then
		for MODULE in $MODULES ; do
			fix_depends $MODULE
		done
		return
	fi

	# discover BROKEN modules and note them if we plan on fixing them
	if [[ ! -n "$NOFIX" ]] ; then
		for MODULE in $MODULES ; do
			if ! run_checks $MODULE ; then
				 BROKEN_MODULES=( ${BROKEN_MODULES[@]} $MODULE )
			fi
		done
	else
		for MODULE in $MODULES ; do
			run_checks $MODULE
		done
	fi

	# if we were called with --fixdepends then we may skip the rest
	if [ -n "$FIXDEPENDS" ] ; then
		return
	fi

	export TMP_LIN_SUCCESS=$(temp_create "successful")
	export TMP_LIN_FAIL=$(temp_create "failed")

        if [[ ! -n "$NOFIX" ]] ; then
		for MODULE in $(sort_by_dependency ${BROKEN_MODULES[@]}) ; do
			if module_installed $MODULE && ! module_held $MODULE ; then
				if ! run_checks $MODULE ; then
					NEVER_ASK=1 DEPS_ONLY= satisfy_depends      &&
					NEVER_ASK=1 DEPS_ONLY= FIX= satisfy_depends &&

					if ! run_checks $MODULE ; then
						verbose_msg "Attempting to recompile \"$MODULE\""
						if ! FIX= lin --compile $MODULE ; then
							verbose_msg "Attempt to recompile \"$MODULE\" FAILED"
							continue
						elif ! run_checks $MODULE ; then
							verbose_msg "Attempt to recompile \"$MODULE\" succeeded but \"$MODULE\" still is broken!"
							continue
						fi
					fi
				fi
			fi
		done

		display_update_log fix
	else
		display_update_log nofix
	fi

	temp_destroy $TMP_LIN_SUCCESS
	temp_destroy $TMP_LIN_FAIL
}
